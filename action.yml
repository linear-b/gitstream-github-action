name: 'gitStream repo agent'
description: 'Public GitHub action for gitStream Continuous Merge'

inputs:
  full_repository:
    description: 'Path of full Repository'
    required: true
  head_ref:
    description: 'Head Branch Ref to checkout to'
    required: true
  base_ref:
    description: 'Base Branch Ref to checkout to'
    required: true
  client_payload:
    description: 'The client payload'
    required: true
  installation_id:
    description: 'The github app installation id'
    required: false
  resolver_url:
    description: 'Resolver url to send results to'
    required: true
  resolver_token:
    description: 'Optional token for resolver'
    required: false
  debug_mode:
    description: 'Run parser in debug mode'
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 20.12.2

    - uses: actions/setup-python@v5
      with:
        python-version: 3.x

    - name: Create GitStream folder
      shell: bash
      run: |
        rm -rf gitstream && rm -rf code && mkdir gitstream
        cd gitstream && mkdir repo

    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.full_repository }}
        ref: ${{ inputs.base_ref }}
        path: gitstream/repo/
        token: ${{ fromJSON(fromJSON(inputs.client_payload)).githubToken || github.token }}

    - name: Escape single quotes
      id: safe-strings
      uses: actions/github-script@v7
      env:
        BASE_REF_ARG: ${{ inputs.base_ref }}
        HEAD_REF_ARG: ${{ inputs.head_ref }}
        PAYLOAD_ARG: ${{ inputs.client_payload }}
        URL_ARG: ${{ fromJSON(fromJSON(inputs.client_payload)).headHttpUrl || fromJSON(fromJSON(inputs.client_payload)).repoUrl }}
      with:
        script: |
          try {
            function convertToSafeString(input) {
              return (input || '').replace(/['`]/g, "\\$&");
            };
            function escapeApostrophe(input) {
              return (input || '').replace(/'/g, "\\'");
            };
            const base_ref = escapeApostrophe(process.env.BASE_REF_ARG);
            const head_ref = escapeApostrophe(process.env.HEAD_REF_ARG);
            const url = convertToSafeString(process.env.URL_ARG);
            const client_payload = convertToSafeString(process.env.PAYLOAD_ARG);
            core.setOutput('base_ref', base_ref);
            core.setOutput('head_ref', head_ref);
            core.setOutput('url', url);
            core.setOutput('client_payload', client_payload);
          } catch (err) {
            core.error(`Failed producing safe string: ${err}`);
            process.exit(1);
          }

    - name: Get condition variables
      uses: actions/github-script@v7
      env:
        CLIENT_PAYLOAD_ARG: ${{ inputs.client_payload }}
        ENABLE_CACHE_ARG: ${{ env.ENABLE_CACHE }}
      with:
        script: |
          require('${{ github.action_path }}/scripts/get-condition-vars.js')(core);

    - name: Download cache artifact
      uses: actions/download-artifact@v4
      if: ${{ env.SKIP_GIT_CLONE === 'true' }}
      with:
        github-token: ${{ fromJSON(fromJSON(inputs.client_payload)).githubToken || github.token }}
        repository: ${{ inputs.full_repository }}
        run-id: ${{ fromJSON(fromJSON(inputs.client_payload)).artifactRunId }}
        name: output
        path: code/output

    - name: Checkout Pull Request branches history
      if: ${{ env.SKIP_GIT_CLONE === 'false' }}
      shell: bash
      run: |
        ALL=2147483647
        cd gitstream && cd repo
        git fetch --deepen=$ALL origin $'${{ steps.safe-strings.outputs.base_ref }}'
        git remote add upstream $'${{ steps.safe-strings.outputs.url }}'
        git fetch --deepen=$ALL upstream $'${{ steps.safe-strings.outputs.head_ref }}'
        git checkout -b $'upstream/${{ steps.safe-strings.outputs.head_ref}}' $'upstream/${{ steps.safe-strings.outputs.head_ref}}'
        git checkout $'${{ steps.safe-strings.outputs.base_ref }}'
        git checkout $'${{ steps.safe-strings.outputs.head_ref }}'

    - name: Create cm folder
      if: ${{ env.SKIP_GIT_CLONE === 'false' }}
      shell: bash
      run: cd gitstream && mkdir cm

    - name: Checkout cm repo
      uses: actions/checkout@v4
      if: ${{ fromJSON(fromJSON(inputs.client_payload)).hasCmRepo == true && env.SKIP_GIT_CLONE === 'false' }}
      with:
        repository: '${{ fromJSON(fromJSON(inputs.client_payload)).owner }}/${{ fromJSON(fromJSON(inputs.client_payload)).cmRepo }}'
        ref: ${{ fromJSON(fromJSON(inputs.client_payload)).cmRepoRef }}
        path: gitstream/cm/

    - name: Volume folder
      shell: bash
      run: mv gitstream code

    - name: Install Dependencies for plugins
      shell: bash
      run: npm i --silent moment lodash axios @octokit/rest@20.1.1

    - name: Run RulesEngine
      shell: bash
      run: node ${{ github.action_path }}/dist/index.js
      env:
        HEAD_REF: ${{ steps.safe-strings.outputs.head_ref }}
        BASE_REF: ${{ steps.safe-strings.outputs.base_ref }}
        CLIENT_PAYLOAD: ${{ steps.safe-strings.outputs.client_payload }}
        RULES_RESOLVER_URL: ${{ inputs.resolver_url }}
        RULES_RESOLVER_TOKEN: ${{ inputs.resolver_token }}
        DEBUG_MODE: ${{ inputs.debug_mode }}
        IS_NON_COMMIT_EVENT: ${{ env.IS_NON_COMMIT_EVENT }}
        ENABLE_CACHE: ${{ env.ENABLE_CACHE || 'false' }}
        ENABLE_DEBUG_ARTIFACTS: ${{ env.ENABLE_DEBUG_ARTIFACTS }}

    - name: Upload artifacts
      if: ${{ env.ENABLE_DEBUG_ARTIFACTS == 'true' || env.ENABLE_CACHE == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        retention-days: 2
        name: output
        path: code/output
