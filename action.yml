name: 'gitStream repo agent'
description: 'Public GitHub action for gitStream Continuous Merge'

inputs:
  full_repository:
    description: 'Path of full Repository'
    required: true
  head_ref:
    description: 'Head Branch Ref to checkout to'
    required: true
  base_ref:
    description: 'Base Branch Ref to checkout to'
    required: true
  client_payload:
    description: 'The client payload'
    required: true
  installation_id:
    description: 'The github app installation id'
    required: false
  resolver_url:
    description: 'Resolver url to send results to'
    required: true
  resolver_token:
    description: 'Optional token for resolver'
    required: false
  debug_mode:
    description: 'Run parser in debug mode'
    required: false
    default: false

runs:
  using: 'composite'
  steps:
    - name: Cache gitstream folder
      id: cache-gitstream
      uses: actions/cache@v3
      with:
        path: gitstream
        key: gitsream-run
        restore-keys: gitsream-run
        
    - name: Set start time
      id: start
      run: echo "timestamp=$EPOCHSECONDS" >> $GITHUB_OUTPUT
      shell: bash
      
      ## this step will be skipped if cache exists
    - name: Create GitStream folder
      if: ${{ steps.cache-gitstream.outputs.cache-hit != 'true' }}
      id: create-gitstream-folder
      shell: bash
      run: |
        mkdir gitstream
        cd gitstream
        mkdir repo
        
      ## this step will be skipped if cache exists
    - name: Checkout head branch
      if: ${{ steps.cache-gitstream.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.full_repository }}
        ref: ${{ github.event.inputs.head_ref }}
        path: 'gitstream/repo/'
        token: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).githubToken || github.token }}
    
    - run: |
        all=2147483647
        cd gitstream
        cd repo
        git fetch --deepen=$all origin ${{ github.event.inputs.base_ref }}
        git checkout -b ${{ github.event.inputs.base_ref }} origin/${{ github.event.inputs.base_ref }}
        git checkout ${{ github.event.inputs.head_ref }}
        git fetch --deepen=$all origin ${{ github.event.inputs.head_ref }}
      shell: bash
      
      ## this step will be skipped if cache exists
    - name: Create cm folder
      if: ${{ steps.cache-gitstream.outputs.cache-hit != 'true' }}
      id: create-cm-folder
      shell: bash
      run: |
        cd gitstream
        mkdir cm
     
     ## this step will be skipped if cache exists
    - name: Checkout cm repo
      uses: actions/checkout@v3
      if: ${{ steps.cache-gitstream.outputs.cache-hit != 'true' && fromJSON(fromJSON(github.event.inputs.client_payload)).hasCmRepo == true }}
      with:
        repository: '${{ fromJSON(fromJSON(github.event.inputs.client_payload)).owner }}/${{ fromJSON(fromJSON(github.event.inputs.client_payload)).cmRepo }}'
        ref: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).cmRepoRef }}
        path: 'gitstream/cm/'
    
    - name: Run The Action
      id: gitstream-action
      if: always()
      run: |
        SECONDS=0
        docker pull gitstream/rules-engine:yeelaTest
        echo "docker-pull-duration=$SECONDS" >> $GITHUB_OUTPUT
        SECONDS=0
        docker run -v $(pwd)/gitstream:/code -e HEAD_REF=${{ github.event.inputs.head_ref }} -e BASE_REF=${{ github.event.inputs.base_ref }} -e CLIENT_PAYLOAD=${{ github.event.inputs.client_payload }} -e RULES_RESOLVER_URL=${{ github.event.inputs.resolver_url }} -e RULES_RESOLVER_TOKEN=${{ github.event.inputs.resolver_token }} -e DEBUG_MODE=${{ github.event.inputs.debug_mode }} gitstream/rules-engine:yeelaTest
        echo "docker-run-duration=$SECONDS" >> $GITHUB_OUTPUT
        echo "action-run-duration=$(($EPOCHSECONDS - ${{ steps.start.outputs.timestamp }}))" >> $GITHUB_OUTPUT
      shell: bash
