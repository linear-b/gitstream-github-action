name: 'GitStream CMR'
description: 'Public github action for GitStream continuous merge platform'

inputs:
  full_repository:
    description: 'Path of full Repository'
    required: true
  head_ref:
    description: 'Head Branch Ref to checkout to'
    required: true
  base_ref:
    description: 'Base Branch Ref to checkout to'
    required: true
  client_payload:
    description: 'The client payload'
    required: true
  installation_id:
    description: 'The github app installation id'
    required: false
  resolver_url:
    description: 'Resolver url to send results to'
    required: true
  resolver_token:
    description: 'Optional token for resolver'
    required: false
  debug_mode:
    description: 'Run parser in debug mode'
    required: false
    default: false

runs:
  using: 'composite'
  steps:
    - name: Create GitStream folder
      id: create-gitstream-folder
      shell: bash
      run: |
        mkdir gitstream
    - name: Checkout head branch
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.full_repository }}
        ref: ${{ github.event.inputs.head_ref }}
        fetch-depth: 0
        path: 'gitstream/'
    - run: |
        cd gitstream
        git branch -r | grep -v '\->' | grep '${{ github.event.inputs.base_ref }}' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done        
        git fetch --all
        git pull --all
      shell: bash
    - name: Run The Action
      if: always()
      run: >-
        SECONDS=0
        ddApiKey=${{ github.event.inputs.client_payload.ddApiKey }}
        docker pull gitstream/rules-engine:yeela
        echo "docker pull took $SECONDS seconds"
        curl -X POST "https://http-intake.logs.datadoghq.com/api/v2/logs" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: $ddApiKey" \
        -d @- << EOF
        [
        {
            "hostname": "gitstream-github-action",
            "message": "docker pull took $SECONDS seconds",
            "service": "gitstream-github-action",
            "env": ${{ github.event.inputs.client_payload.env }},
            "level": "info",
            "data": {
                "owner": ${{ github.event.inputs.client_payload.owner }},
                "repo": ${{ github.event.inputs.client_payload.repo }},
                "pullRequestNumber": ${{ github.event.inputs.client_payload.pullRequestNumber }},
                "branch": ${{ github.event.inputs.client_payload.branch }},
                "triggeredBy": ${{ github.event.inputs.client_payload.triggeredBy }}
            }
        }
        ]
        EOF 
        SECONDS=0
        docker run -v $(pwd)/gitstream:/code -e HEAD_REF=${{ github.event.inputs.head_ref }} -e BASE_REF=${{ github.event.inputs.base_ref }} -e CLIENT_PAYLOAD=${{ github.event.inputs.client_payload }} -e RULES_RESOLVER_URL=${{ github.event.inputs.resolver_url }} -e RULES_RESOLVER_TOKEN=${{ github.event.inputs.resolver_token }} -e DEBUG_MODE=${{ github.event.inputs.debug_mode }} gitstream/rules-engine
        echo "docker run took $SECONDS seconds"
        curl -X POST "https://http-intake.logs.datadoghq.com/api/v2/logs" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        -H "DD-API-KEY: $ddApiKey" \
        -d @- << EOF
        [
        {
            "hostname": "gitstream-github-action",
            "message": "docker run took $SECONDS seconds",
            "service": "gitstream-github-action",
            "env": ${{ github.event.inputs.client_payload.env }},
            "level": "info",
            "data": {
                "owner": ${{ github.event.inputs.client_payload.owner }},
                "repo": ${{ github.event.inputs.client_payload.repo }},
                "pullRequestNumber": ${{ github.event.inputs.client_payload.pullRequestNumber }},
                "branch": ${{ github.event.inputs.client_payload.branch }},
                "triggeredBy": ${{ github.event.inputs.client_payload.triggeredBy }}
            }
        }
        ]
        EOF 
      shell: bash
