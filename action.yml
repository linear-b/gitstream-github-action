name: "gitStream repo agent"
description: "Public GitHub action for gitStream Continuous Merge"
inputs:
  full_repository:
    description: "Path of full Repository"
    required: true
  head_ref:
    description: "Head Branch Ref to checkout to"
    required: true
  base_ref:
    description: "Base Branch Ref to checkout to"
    required: true
  client_payload:
    description: "The client payload"
    required: true
  installation_id:
    description: "The github app installation id"
    required: false
  resolver_url:
    description: "Resolver url to send results to"
    required: true
  resolver_token:
    description: "Optional token for resolver"
    required: false
  debug_mode:
    description: "Run parser in debug mode"
    required: false
    default: 'false'
  pull_docker_from_cache:
    description: "If should store gitstream docker in GitHub cache"
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - name: Check pull_docker_from_cache as boolean
      shell: bash
      if: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).pull_docker_from_cache == true }}
      run: |
        echo "Check pull_docker_from_cache as boolean"
        
    - name: Check pull_docker_from_cache as string
      shell: bash
      if: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).pull_docker_from_cache == 'true' }}
      run: |
        echo "Check pull_docker_from_cache as string"

    - name: Create GitStream folder
      id: create-gitstream-folder
      shell: bash
      run: |
        rm -rf gitstream
        mkdir gitstream
        cd gitstream
        mkdir repo

    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.full_repository }}
        ref: ${{ github.event.inputs.base_ref }}
        path: "gitstream/repo/"
        token: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).githubToken || github.token }}

    - name: Escape single quotes
      id: safe-strings
      uses: actions/github-script@v6
      env:
        BASE_REF_ARG: ${{ github.event.inputs.base_ref }}
        HEAD_REF_ARG: ${{ github.event.inputs.head_ref }}
        PAYLOAD_ARG: ${{ github.event.inputs.client_payload }}
        URL_ARG: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).headHttpUrl || fromJSON(fromJSON(github.event.inputs.client_payload)).repoUrl }}
      with:
        script: |
          try {
            function convertToSafeString(input) {
              return (input || '').replace(/['`]/g, "\\$&");
            };
            function escapeApostrophe(input) {
              return (input || '').replace(/'/g, "\\'");
            };
            const base_ref = escapeApostrophe(process.env.BASE_REF_ARG);
            const head_ref = escapeApostrophe(process.env.HEAD_REF_ARG);
            const url = convertToSafeString(process.env.URL_ARG);
            const client_payload = convertToSafeString(process.env.PAYLOAD_ARG);
            core.setOutput('base_ref', base_ref);
            core.setOutput('head_ref', head_ref);
            core.setOutput('url', url);
            core.setOutput('client_payload', client_payload);
          } catch (err) {
            core.error(`Failed producing safe string: ${err}`);
            process.exit(1);
          }

    - name: Checkout Pull Request branches history
      run: |
        all=2147483647
        cd gitstream
        cd repo
        git fetch --deepen=$all origin $'${{ steps.safe-strings.outputs.base_ref }}'
        git remote add upstream $'${{ steps.safe-strings.outputs.url }}'
        git fetch --deepen=$all upstream $'${{ steps.safe-strings.outputs.head_ref }}'
        git checkout -b $'upstream/${{ steps.safe-strings.outputs.head_ref}}' $'upstream/${{ steps.safe-strings.outputs.head_ref}}'
      shell: bash

    - name: Create cm folder
      id: create-cm-folder
      shell: bash
      run: |
        cd gitstream
        mkdir cm

    - name: Checkout cm repo
      uses: actions/checkout@v4
      if: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).hasCmRepo == true }}
      with:
        repository: "${{ fromJSON(fromJSON(github.event.inputs.client_payload)).owner }}/${{ fromJSON(fromJSON(github.event.inputs.client_payload)).cmRepo }}"
        ref: ${{ fromJSON(fromJSON(github.event.inputs.client_payload)).cmRepoRef }}
        path: "gitstream/cm/"

    - name: Docker Layer Caching
      if: ${{ github.event.inputs.pull_docker_from_cache == true }}
      uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true

    - name: Pull gitstream Docker
      shell: bash
      run: docker pull gitstream/rules-engine:latest

    - name: Run The Action
      id: gitstream-action
      if: always()
      run: |
        env_file=env.user
        touch $env_file
        for var in $(env | cut -d "=" -f 1); do
          value="${!var}"
          echo "$var=$value" >> "$env_file"
        done
        docker run --env-file $env_file -v $(pwd)/gitstream:/code \
          -e HEAD_REF=$'upstream/${{ steps.safe-strings.outputs.head_ref }}' \
          -e BASE_REF=$'${{ steps.safe-strings.outputs.base_ref }}' \
          -e CLIENT_PAYLOAD=${{ steps.safe-strings.outputs.client_payload }} \
          -e RULES_RESOLVER_URL=${{ github.event.inputs.resolver_url }} \
          -e RULES_RESOLVER_TOKEN=${{ github.event.inputs.resolver_token }} \
          -e DEBUG_MODE=${{ github.event.inputs.debug_mode }} \
          gitstream/rules-engine:latest
      shell: bash
